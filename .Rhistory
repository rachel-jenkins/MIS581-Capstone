fit <- auto.arima(ts_data, xreg = dummy_vars)
aggregated_data <- aggregated_data %>%
mutate(month = relevel(month(visit_date, label = TRUE), ref = "Jan"),  # Use first month as reference
day_of_week = relevel(wday(visit_date, label = TRUE, abbr = FALSE), ref = "Monday"))
#______________PREPARE DATA____________
#set working directory
setwd("C:/Users/Rachel/Documents/Grad School/MIS581/Portfolio Project")
#Import libraries
library(ggplot2)
library(dplyr)
library(forecast)
library(tseries)
library(zoo)
#Load data
visit_data<-read.csv("~/Grad School/MIS581/Portfolio Project/air_visit_data.csv")
date_data<-read.csv("~/Grad School/MIS581/Portfolio Project/date_info.csv")
#Combine visit_data with date_data
combined_data <- merge(visit_data, date_data, by.x = "visit_date", by.y = "calendar_date")
combined_data$visit_date <- as.Date(combined_data$visit_date)
combined_data$holiday_flg <- as.factor(combined_data$holiday_flg)
#Aggregate data by date
aggregated_data <- combined_data %>%
group_by(visit_date) %>%
summarise(total_visitors = sum(visitors, na.rm = TRUE),
is_holiday = first(holiday_flg),
day_of_week = first(day_of_week))
#Aggregate data by date
aggregated_data <- combined_data %>%
group_by(visit_date) %>%
summarise(total_visitors = sum(visitors, na.rm = TRUE))
#Fill missing date with NA
all_dates <- seq.Date(min(aggregated_data$visit_date), max(aggregated_data$visit_date), by = "day")
aggregated_data <- full_join(data.frame(visit_date = all_dates), aggregated_data, by = "visit_date")
#Interpolate Missing Values
aggregated_data$total_visitors <- zoo::na.approx(aggregated_data$total_visitors, rule = 2)
#Plot Time Series
ggplot(aggregated_data, aes(x = visit_date, y = total_visitors)) +
geom_line() +
labs(title = "Daily Visitors Aggregated Across All Restaurants",
x = "Date",
y = "Total Visitors")
#Create Time Series
ts_data <- ts(aggregated_data$total_visitors,
frequency = 365, start = c(2016, 1))
#Fourier terms for seasonality
K <- 4
fourier_terms <- fourier(ts_data, K = K)
fit <- auto.arima(ts_data, xreg = fourier_terms)
summary(fit)
#Forecast future visitors with Fourier terms
forecasted <- forecast(fit, xreg = fourier(ts_data, K = K, h = 30))
autoplot(forecasted)
#ANOVA Total Visitors
anova_result <- aov(Total_Visitors ~ holiday_flg, data = daily_visitors)
#Aggregate data by date
aggregated_data <- combined_data %>%
group_by(visit_date) %>%
summarise(total_visitors = sum(visitors, na.rm = TRUE),
holiday_flg = first(holiday_flg))
#ANOVA Total Visitors
anova_result <- aov(total_visitors ~ holiday_flg, data = aggregated_data)
summary(anova_result)
#set working directory
setwd("C:/Users/Rachel/Documents/Grad School/MIS581/Portfolio Project")
#Import libraries
library(ggplot2)
library(dplyr)
library(forecast)
library(tseries)
library(zoo)
#Load data
visit_data<-read.csv("~/Grad School/MIS581/Portfolio Project/air_visit_data.csv")
date_data<-read.csv("~/Grad School/MIS581/Portfolio Project/date_info.csv")
#Combine visit_data with date_data
combined_data <- merge(visit_data, date_data, by.x = "visit_date", by.y = "calendar_date")
combined_data$visit_date <- as.Date(combined_data$visit_date)
combined_data$holiday_flg <- as.factor(combined_data$holiday_flg)
#Aggregate data by date
aggregated_data <- combined_data %>%
group_by(visit_date) %>%
summarise(total_visitors = sum(visitors, na.rm = TRUE),
holiday_flg = first(holiday_flg))
#Fill missing date with NA
all_dates <- seq.Date(min(aggregated_data$visit_date), max(aggregated_data$visit_date), by = "day")
aggregated_data <- full_join(data.frame(visit_date = all_dates), aggregated_data, by = "visit_date")
#Interpolate Missing Values
aggregated_data$total_visitors <- zoo::na.approx(aggregated_data$total_visitors, rule = 2)
#Plot Time Series
ggplot(aggregated_data, aes(x = visit_date, y = total_visitors)) +
geom_line() +
labs(title = "Daily Visitors Aggregated Across All Restaurants",
x = "Date",
y = "Total Visitors")
summary(aggregated_data)
#Create Time Series
ts_data <- ts(aggregated_data$total_visitors,
frequency = 365, start = c(2016, 1))
#Fourier terms for seasonality
K <- 4
fourier_terms <- fourier(ts_data, K = K)
fit <- auto.arima(ts_data, xreg = fourier_terms)
summary(fit)
install.packages("kableExtra")
install.packages("webshot2") # Required for saving HTML tables as images
library(kableExtra)
library(webshot2)
# Create a table of the summary statistics
summary_df <- as.data.frame(summary(fit)$coefficients)
# Create a kable HTML table
table_html <- kable(summary_df, format = "html",
caption = "ARIMA Model Summary") %>%
kable_styling(full_width = FALSE)
# Save HTML table as an image
save_kable(table_html, "model_summary_table.png")
png("model_diagnostics.png")
par(mfrow = c(2, 2))
plot(fit)
dev.off()
forecasted <- forecast(fit, xreg = fourier(ts_data, K = K, h = 30))
png("forecast_plot.png")
autoplot(forecasted)
dev.off()
forecast_df <- data.frame(
Date = as.Date(time(forecasted$mean)),
Forecast = as.numeric(forecasted$mean)
)
#set working directory
setwd("C:/Users/Rachel/Documents/Grad School/MIS581/Portfolio Project")
#Import libraries
library(ggplot2)
library(dplyr)
library(forecast)
library(tseries)
library(zoo)
#Load data
visit_data<-read.csv("~/Grad School/MIS581/Portfolio Project/air_visit_data.csv")
date_data<-read.csv("~/Grad School/MIS581/Portfolio Project/date_info.csv")
#Combine visit_data with date_data
combined_data <- merge(visit_data, date_data, by.x = "visit_date", by.y = "calendar_date")
combined_data$visit_date <- as.Date(combined_data$visit_date)
combined_data$holiday_flg <- as.factor(combined_data$holiday_flg)
#Aggregate data by date
aggregated_data <- combined_data %>%
group_by(visit_date) %>%
summarise(total_visitors = sum(visitors, na.rm = TRUE),
holiday_flg = first(holiday_flg))
#Fill missing date with NA
all_dates <- seq.Date(min(aggregated_data$visit_date), max(aggregated_data$visit_date), by = "day")
aggregated_data <- full_join(data.frame(visit_date = all_dates), aggregated_data, by = "visit_date")
#Interpolate Missing Values
aggregated_data$total_visitors <- zoo::na.approx(aggregated_data$total_visitors, rule = 2)
#Plot Time Series
ggplot(aggregated_data, aes(x = visit_date, y = total_visitors)) +
geom_line() +
labs(title = "Daily Visitors Aggregated Across All Restaurants",
x = "Date",
y = "Total Visitors")
summary(aggregated_data)
#Create Time Series
ts_data <- ts(aggregated_data$total_visitors,
frequency = 365, start = c(2016, 1))
#Fourier terms for seasonality
K <- 4
fourier_terms <- fourier(ts_data, K = K)
fit <- auto.arima(ts_data, xreg = fourier_terms)
summary(fit)
#Forecast future visitors with Fourier terms
forecasted <- forecast(fit, xreg = fourier(ts_data, K = K, h = 30))
autoplot(forecasted)
library(tidyverse)
library(lubridate)
#Aggregate data by month
monthly_data <- aggregated_data %>%
mutate(month = floor_date(visit_date, "month")) %>%
group_by(month)%>%
summarise(total_visitors = sum(total_visitors, na.rm = TRUE))
#Plot Time Series
ggplot(monthly_data, aes(x = month, y = total_visitors)) +
geom_line() +
labs(title = "Daily Visitors Aggregated Across All Restaurants",
x = "Month",
y = "Total Visitors")
summary(month_data)
summary(monthly_data)
#Create Time Series
ts_data <- ts(monthly_data$total_visitors,
frequency = 12, start = c(2016, 1))
#Fourier terms for seasonality
K <- 4
fourier_terms <- fourier(ts_data, K = K)
fit <- auto.arima(ts_data, xreg = fourier_terms)
summary(fit)
#Aggregate data by month
monthly_data <- aggregated_data %>%
mutate(month = floor_date(visit_date, "month")) %>%
group_by(month)%>%
summarise(total_visitors = sum(total_visitors, na.rm = TRUE),
holiday_flg = first(holiday_flg),
day_of_week = first(day_of_week))
#Aggregate data by date
aggregated_data <- combined_data %>%
group_by(visit_date) %>%
summarise(total_visitors = sum(visitors, na.rm = TRUE),
holiday_flg = first(holiday_flg),
day_of_week = first(day_of_week))
#Fill missing date with NA
all_dates <- seq.Date(min(aggregated_data$visit_date), max(aggregated_data$visit_date), by = "day")
aggregated_data <- full_join(data.frame(visit_date = all_dates), aggregated_data, by = "visit_date")
#Interpolate Missing Values
aggregated_data$total_visitors <- zoo::na.approx(aggregated_data$total_visitors, rule = 2)
#Aggregate data by month
monthly_data <- aggregated_data %>%
mutate(month = floor_date(visit_date, "month")) %>%
group_by(month)%>%
summarise(total_visitors = sum(total_visitors, na.rm = TRUE),
holiday_flg = first(holiday_flg),
day_of_week = first(day_of_week))
#Plot Time Series
ggplot(monthly_data, aes(x = month, y = total_visitors)) +
geom_line() +
labs(title = "Daily Visitors Aggregated Across All Restaurants",
x = "Month",
y = "Total Visitors")
summary(monthly_data)
#Create Time Series
ts_data <- ts(monthly_data$total_visitors,
frequency = 12, start = c(2016, 1))
#Fourier terms for seasonality
K <- 4
fourier_terms <- fourier(ts_data, K = K)
fit <- auto.arima(ts_data, xreg = fourier_terms)
summary(fit)
#Forecast future visitors with Fourier terms
forecasted <- forecast(fit, xreg = fourier(ts_data, K = K, h = 30))
autoplot(forecasted)
#Forecast future visitors with Fourier terms
forecasted <- forecast(fit, xreg = fourier(ts_data, K = K, h = 12))
autoplot(forecasted)
#ANOVA Total Visitors
anova_result <- aov(total_visitors ~ holiday_flg, data = aggregated_data)
summary(anova_result)
#Plot Time Series
ggplot(monthly_data, aes(x = month, y = total_visitors)) +
geom_line() +
labs(title = "Daily Visitors Aggregated Across All Restaurants",
x = "Month",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma)
#set working directory
setwd("C:/Users/Rachel/Documents/Grad School/MIS581/Portfolio Project")
#Import libraries
library(ggplot2)
library(dplyr)
library(forecast)
library(tseries)
library(zoo)
library(tidyverse)
library(lubridate)
#Load data
visit_data<-read.csv("~/Grad School/MIS581/Portfolio Project/air_visit_data.csv")
date_data<-read.csv("~/Grad School/MIS581/Portfolio Project/date_info.csv")
#Combine visit_data with date_data
combined_data <- merge(visit_data, date_data, by.x = "visit_date", by.y = "calendar_date")
combined_data$visit_date <- as.Date(combined_data$visit_date)
combined_data$holiday_flg <- as.factor(combined_data$holiday_flg)
#Aggregate data by date
aggregated_data <- combined_data %>%
group_by(visit_date) %>%
summarise(total_visitors = sum(visitors, na.rm = TRUE),
holiday_flg = first(holiday_flg))
#Fill missing date with NA
all_dates <- seq.Date(min(aggregated_data$visit_date), max(aggregated_data$visit_date), by = "day")
aggregated_data <- full_join(data.frame(visit_date = all_dates), aggregated_data, by = "visit_date")
#Interpolate Missing Values
aggregated_data$total_visitors <- zoo::na.approx(aggregated_data$total_visitors, rule = 2)
#Aggregate data by month
monthly_data <- aggregated_data %>%
mutate(month = floor_date(visit_date, "month")) %>%
group_by(month)%>%
summarise(total_visitors = sum(total_visitors, na.rm = TRUE))
#Plot Time Series
ggplot(monthly_data, aes(x = month, y = total_visitors)) +
geom_line() +
labs(title = "Daily Visitors Aggregated Across All Restaurants",
x = "Month",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma)
#Plot Time Series
ggplot(monthly_data, aes(x = month, y = total_visitors)) +
geom_line() +
labs(title = "Monthly Visitors Aggregated Across All Restaurants",
x = "Month",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma)
summary(monthly_data)
#Create Time Series
ts_data <- ts(monthly_data$total_visitors,
frequency = 12, start = c(2016, 1))
#Fourier terms for seasonality
K <- 4
fourier_terms <- fourier(ts_data, K = K)
fit <- auto.arima(ts_data, xreg = fourier_terms)
summary(fit)
#Forecast future visitors with Fourier terms
forecasted <- forecast(fit, xreg = fourier(ts_data, K = K, h = 12))
autoplot(forecasted)
autoplot(forecasted) +
labs(title = "Forecast of TOtal Visitors with Fourier Terms",
x = "Date",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma) +
theme_minimal() +
theme(legend.position = "bottom",
legend.title = element_blank())
forecast_df <- data.frame(
Date = as.Date(time(forecasted$mean)),
Forecast = as.numeric(forecasted$mean),
Lower = as.numeric(forecasted$lower[,2]),
Upper = as.numeric(forecasted$upper[,2])
)
historical_df <- data.frame(
Date = as.Date(time(ts_data)),
Visitors = as.numeric(ts_data)
)
ggplot() +
geom_line(data = historical_df, aes(x = Date, y = Visitors, color = "Historical Data "), size = 1) +
geom_ribbon(data = forecast_df, aes(x = Date, ymin = Lower, ymax = Upper), fill = "grey80", alpha = 0.5) +
geom_line(data = forecast_df, aes(x = Date, y = Forecast, color = "Forecast"), size = 1) +
labs(title = "Forecast of TOtal Visitors with Fourier Terms",
x = "Date",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "3 months") +
theme_minimal() +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = c("Historical Data" = "blue", "Forecast" = "red"))
ggplot() +
geom_line(data = historical_df, aes(x = Date, y = Visitors, color = "Historical Data "), size = 1) +
geom_ribbon(data = forecast_df, aes(x = Date, ymin = Lower, ymax = Upper), fill = "grey80", alpha = 0.5) +
geom_line(data = forecast_df, aes(x = Date, y = Forecast, color = "Forecast"), size = 1) +
labs(title = "Forecast of TOtal Visitors with Fourier Terms",
x = "Date",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "3 months") +
theme_minimal() +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = c("Forecast" = "red"))
ggplot() +
geom_line(data = historical_df, aes(x = Date, y = Visitors, color = "Historical Data "), size = 1) +
geom_ribbon(data = forecast_df, aes(x = Date, ymin = Lower, ymax = Upper), fill = "grey", alpha = 0.5) +
geom_line(data = forecast_df, aes(x = Date, y = Forecast, color = "Forecast"), size = 1) +
labs(title = "Forecast of TOtal Visitors with Fourier Terms",
x = "Date",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "3 months") +
theme_minimal() +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = c("Forecast" = "red"))
ggplot() +
geom_line(data = historical_df, aes(x = Date, y = Visitors, color = "Historical Data "), size = 1) +
geom_ribbon(data = forecast_df, aes(x = Date, ymin = Lower, ymax = Upper), fill = "grey80", alpha = 0.5) +
geom_line(data = forecast_df, aes(x = Date, y = Forecast, color = "Forecast"), size = 1) +
labs(title = "Forecast of TOtal Visitors with Fourier Terms",
x = "Date",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "3 months") +
theme_minimal() +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = c("Forecast" = "red"))
ggplot() +
geom_line(data = historical_df, aes(x = Date, y = Visitors, color = "Historical Data "), size = 1) +
geom_ribbon(data = forecast_df, aes(x = Date, ymin = Lower, ymax = Upper), fill = "grey80", alpha = 0.5) +
geom_line(data = forecast_df, aes(x = Date, y = Forecast, color = "Forecast"), size = 1) +
labs(title = "Forecast of Total Visitors with Fourier Terms",
x = "Date",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "3 months") +
theme_minimal() +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = c("Forecast" = "red"))
ggplot() +
geom_line(data = historical_df, aes(x = Date, y = Visitors, color = "Historical Data "), size = 1) +
geom_ribbon(data = forecast_df, aes(x = Date, ymin = Lower, ymax = Upper), fill = "grey80", alpha = 0.5) +
geom_line(data = forecast_df, aes(x = Date, y = Forecast, color = "Forecast"), size = 1) +
labs(title = "Forecast of Total Visitors with Fourier Terms",
x = "Date",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "3 months") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = c("Forecast" = "red"))
ggplot() +
geom_line(data = historical_df, aes(x = Date, y = Visitors, color = "Historical Data "), size = 1) +
geom_ribbon(data = forecast_df, aes(x = Date, ymin = Lower, ymax = Upper), fill = "grey80", alpha = 0.5) +
geom_line(data = forecast_df, aes(x = Date, y = Forecast, color = "Forecast"), size = 1) +
labs(title = "Forecast of Total Visitors with Fourier Terms",
x = "Date",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma, limits = (0, NA)) +
ggplot() +
geom_line(data = historical_df, aes(x = Date, y = Visitors, color = "Historical Data "), size = 1) +
geom_ribbon(data = forecast_df, aes(x = Date, ymin = Lower, ymax = Upper), fill = "grey80", alpha = 0.5) +
geom_line(data = forecast_df, aes(x = Date, y = Forecast, color = "Forecast"), size = 1) +
labs(title = "Forecast of Total Visitors with Fourier Terms",
x = "Date",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma, limits = c(0, NA)) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "3 months") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = c("Forecast" = "red"))
ggplot() +
geom_line(data = historical_df, aes(x = Date, y = Visitors, color = "Historical Data "), size = 1) +
geom_ribbon(data = forecast_df, aes(x = Date, ymin = Lower, ymax = Upper), fill = "grey80", alpha = 0.5) +
geom_line(data = forecast_df, aes(x = Date, y = Forecast, color = "Forecast"), size = 1) +
labs(title = "Forecast of Total Visitors with Fourier Terms",
x = "Date",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_labels = "%m/%Y", date_breaks = "3 months") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.title = element_blank(),
legend.position = "bottom") +
scale_color_manual(values = c("Forecast" = "red"))
summary(aggregated_data)
#ANOVA Total Visitors
anova_result <- aov(total_visitors ~ holiday_flg, data = aggregated_data)
summary(anova_result)
holiday_counts <- aggregated_data %>%
group_by(holiday_flg) %>%
summarise(count = n())
ggplot(holiday_counts, aes(x = holiday_flg, y = count, fill = holiday_flg)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Number of Holidays vs. Non-Holidays",
x = "Holiday",
y = "Count") +
scale_x_discrete(labels = c("Non-Holiday", "Holiday")) +
scale_fill_manual(values = c("Non-Holiday" = "skyblue", "Holiday" = "salmon")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(holiday_counts, aes(x = holiday_flg, y = count, fill = holiday_flg)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Number of Holidays vs. Non-Holidays",
x = "Holiday",
y = "Count") +
scale_x_discrete(labels = c("Non-Holiday", "Holiday")) +
scale_fill_manual(values = c("Non-Holiday" = "blue", "Holiday" = "red")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(holiday_counts, aes(x = holiday_flg, y = count, fill = holiday_flg)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Number of Holidays vs. Non-Holidays",
x = "Holiday",
y = "Count") +
scale_x_discrete(labels = c("Non-Holiday", "Holiday")) +
scale_fill_manual(values = c("0" = "blue", "1" = "red")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(holiday_counts, aes(x = holiday_flg, y = count, fill = holiday_flg)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Number of Holidays vs. Non-Holidays",
x = "Holiday",
y = "Count") +
scale_x_discrete(labels = c("Non-Holiday", "Holiday")) +
scale_fill_manual(values = c("0" = "skyblue", "1" = "salmon")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(holiday_counts, aes(x = holiday_flg, y = count, fill = holiday_flg)) +
geom_bar(stat = "identity", show.legend = FALSE) +
geom_text(aes(label = count), vjust = -0.5, color = "black") +
labs(title = "Number of Holidays vs. Non-Holidays",
x = "Holiday",
y = "Count") +
scale_x_discrete(labels = c("Non-Holiday", "Holiday")) +
scale_fill_manual(values = c("0" = "skyblue", "1" = "salmon")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
summary(fit)
summary(fit)
#Fourier terms for seasonality
K <- 4
fourier_terms <- fourier(ts_data, K = K)
fit <- auto.arima(ts_data, xreg = fourier_terms)
summary(fit)
#Plot Time Series
ggplot(monthly_data, aes(x = month, y = total_visitors)) +
geom_line() +
labs(title = "Monthly Visitors Aggregated Across All Restaurants",
x = "Month",
y = "Total Visitors") +
scale_y_continuous(labels = scales::comma) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
summary(anova_result)
